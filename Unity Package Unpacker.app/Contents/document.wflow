<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>AMApplicationBuild</key>
	<string>417</string>
	<key>AMApplicationVersion</key>
	<string>2.6</string>
	<key>AMDocumentVersion</key>
	<string>2</string>
	<key>actions</key>
	<array>
		<dict>
			<key>action</key>
			<dict>
				<key>AMAccepts</key>
				<dict>
					<key>Container</key>
					<string>List</string>
					<key>Optional</key>
					<true/>
					<key>Types</key>
					<array>
						<string>com.apple.cocoa.string</string>
					</array>
				</dict>
				<key>AMActionVersion</key>
				<string>2.0.3</string>
				<key>AMApplication</key>
				<array>
					<string>Automator</string>
				</array>
				<key>AMParameterProperties</key>
				<dict>
					<key>COMMAND_STRING</key>
					<dict/>
					<key>CheckedForUserDefaultShell</key>
					<dict/>
					<key>inputMethod</key>
					<dict/>
					<key>shell</key>
					<dict/>
					<key>source</key>
					<dict/>
				</dict>
				<key>AMProvides</key>
				<dict>
					<key>Container</key>
					<string>List</string>
					<key>Types</key>
					<array>
						<string>com.apple.cocoa.string</string>
					</array>
				</dict>
				<key>ActionBundlePath</key>
				<string>/System/Library/Automator/Run Shell Script.action</string>
				<key>ActionName</key>
				<string>Run Shell Script</string>
				<key>ActionParameters</key>
				<dict>
					<key>COMMAND_STRING</key>
					<string>#!/usr/bin/env python
#
# UnityPackage Extractor
#
# Extracts files/folders from a .unitypackage file, reading the 'pathname'
# files it contains to rebuild a "readable" file/folder structure.
#
# Usage: extractunitypackage.py input_file [output_path]
#
# "input_file" should be a .unitypackage file. The part of the filename
# before the extension will be used as the name of the directory that the 
# packages contents will be extracted to.
#
# "output_path" is an optional path where the package's files will be
# extracted to. If omitted, the current working directory is used. If
# specified, the path should already exist.

# Update (by Entwicklerpages): Simple fixes for python3 support. Now works on both versions.

import os
import stat
import shutil
import sys
import tarfile

if len(sys.argv) &lt; 2:
	print ('No input file specified.')
	sys.exit()

name, extension = os.path.splitext(sys.argv[1])

outputDir = ''
if len(sys.argv) &gt; 2:
	outputDir = os.path.join(sys.argv[2], name)
else:
	outputDir = name
workingDir = '.working'

# can't proceed if the output dir exists already
# but if the temp working dir exists, we clean it out before extracting
if os.path.exists(outputDir):
	print ('Output dir "' + outputDir + '" exists. Aborting.')
	sys.exit();
if os.path.exists(workingDir):
	shutil.rmtree(workingDir)

# extract .unitypackage contents to a temporary space
tar = tarfile.open(sys.argv[1], 'r:gz')
tar.extractall(workingDir);
tar.close()

# build association between the unitypackage's root directory names
# (which each have 1 asset in them) to the actual filename (stored in the 'pathname' file)
mapping = {}
for i in os.listdir(workingDir):
	rootFile = os.path.join(workingDir, i)
	asset = i

	if os.path.isdir(rootFile):
		realPath = ''

		# we need to check if an 'asset' file exists (sometimes it won't be there
		# such as when the 'pathname' file is just specifying a directory)
		hasAsset = False

		for j in os.listdir(rootFile):
			# grab the real path
			if j == 'pathname':
				lines = [line.strip() for line in open(os.path.join(rootFile, j))]
				realPath = lines[0]     # should always be on the first line
			elif j == 'asset':
				hasAsset = True

		# if an 'asset' file exists in this directory, then this directory
		# contains a file that should be moved+renamed. otherwise we can
		# ignore this directory altogether...
		if hasAsset:
			mapping[asset] = realPath

# mapping from unitypackage internal filenames to real filenames is now built
# walk through them all and move the 'asset' files out and rename, building
# the directory structure listed in the real filenames we found as we go

os.makedirs(outputDir)

for asset in mapping:
	path, filename = os.path.split(mapping[asset])

	destDir = os.path.join(outputDir, path)
	destFile = os.path.join(destDir, filename)
	source = os.path.join(workingDir, asset, 'asset');

	if not os.path.exists(destDir):
		os.makedirs(destDir)

	shutil.move(source, destFile)
	
	# change file permissions for unix because under mac os x 
	# (perhaps also other unix systems) all files are marked as executable
	# for safety reasons os x prevent the access to the extracted files
	os.chmod(destFile, stat.S_IRUSR | stat.S_IWUSR | stat.S_IRGRP | stat.S_IROTH)
	
	print (asset + ' =&gt; ' + mapping[asset])

# done, cleanup any leftovers...
shutil.rmtree(workingDir)
</string>
					<key>CheckedForUserDefaultShell</key>
					<true/>
					<key>inputMethod</key>
					<integer>1</integer>
					<key>shell</key>
					<string>/usr/bin/python</string>
					<key>source</key>
					<string></string>
				</dict>
				<key>BundleIdentifier</key>
				<string>com.apple.RunShellScript</string>
				<key>CFBundleVersion</key>
				<string>2.0.3</string>
				<key>CanShowSelectedItemsWhenRun</key>
				<false/>
				<key>CanShowWhenRun</key>
				<true/>
				<key>Category</key>
				<array>
					<string>AMCategoryUtilities</string>
				</array>
				<key>Class Name</key>
				<string>RunShellScriptAction</string>
				<key>InputUUID</key>
				<string>C8389E5B-649C-4E44-AE41-FC788BE8947C</string>
				<key>Keywords</key>
				<array>
					<string>Shell</string>
					<string>Script</string>
					<string>Command</string>
					<string>Run</string>
					<string>Unix</string>
				</array>
				<key>OutputUUID</key>
				<string>EA925B1A-C7AC-4FD3-9721-E2B490ADFE69</string>
				<key>ShowWhenRun</key>
				<false/>
				<key>UUID</key>
				<string>8364FA22-78C7-4B64-9735-59B6C5B29E00</string>
				<key>UnlocalizedApplications</key>
				<array>
					<string>Automator</string>
				</array>
				<key>arguments</key>
				<dict>
					<key>0</key>
					<dict>
						<key>default value</key>
						<integer>0</integer>
						<key>name</key>
						<string>inputMethod</string>
						<key>required</key>
						<string>0</string>
						<key>type</key>
						<string>0</string>
						<key>uuid</key>
						<string>0</string>
					</dict>
					<key>1</key>
					<dict>
						<key>default value</key>
						<string></string>
						<key>name</key>
						<string>source</string>
						<key>required</key>
						<string>0</string>
						<key>type</key>
						<string>0</string>
						<key>uuid</key>
						<string>1</string>
					</dict>
					<key>2</key>
					<dict>
						<key>default value</key>
						<false/>
						<key>name</key>
						<string>CheckedForUserDefaultShell</string>
						<key>required</key>
						<string>0</string>
						<key>type</key>
						<string>0</string>
						<key>uuid</key>
						<string>2</string>
					</dict>
					<key>3</key>
					<dict>
						<key>default value</key>
						<string></string>
						<key>name</key>
						<string>COMMAND_STRING</string>
						<key>required</key>
						<string>0</string>
						<key>type</key>
						<string>0</string>
						<key>uuid</key>
						<string>3</string>
					</dict>
					<key>4</key>
					<dict>
						<key>default value</key>
						<string>/bin/sh</string>
						<key>name</key>
						<string>shell</string>
						<key>required</key>
						<string>0</string>
						<key>type</key>
						<string>0</string>
						<key>uuid</key>
						<string>4</string>
					</dict>
				</dict>
				<key>isViewVisible</key>
				<true/>
				<key>location</key>
				<string>462.500000:616.000000</string>
				<key>nibPath</key>
				<string>/System/Library/Automator/Run Shell Script.action/Contents/Resources/English.lproj/main.nib</string>
			</dict>
			<key>isViewVisible</key>
			<true/>
		</dict>
	</array>
	<key>connectors</key>
	<dict/>
	<key>workflowMetaData</key>
	<dict>
		<key>workflowTypeIdentifier</key>
		<string>com.apple.Automator.application</string>
	</dict>
</dict>
</plist>
